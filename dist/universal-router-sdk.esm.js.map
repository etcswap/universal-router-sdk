{"version":3,"file":"universal-router-sdk.esm.js","sources":["../src/entities/Command.ts","../src/entities/NFTTrade.ts","../src/utils/routerCommands.ts","../src/utils/constants.ts","../src/utils/numbers.ts","../src/entities/protocols/uniswap.ts","../src/utils/inputTokens.ts","../src/swapRouter.ts","../src/entities/protocols/cryptopunk.ts","../src/entities/protocols/foundation.ts","../src/entities/protocols/looksRareV2.ts","../src/entities/protocols/nft20.ts","../src/entities/protocols/nftx.ts","../src/entities/protocols/seaport.ts","../src/entities/protocols/sudoswap.ts","../src/entities/protocols/x2y2.ts","../src/entities/protocols/unwrapWETH.ts","../src/entities/protocols/wrapSTETH.ts","../src/entities/protocols/unwrapSTETH.ts"],"sourcesContent":["import { RoutePlanner } from '../utils/routerCommands'\n\nexport type TradeConfig = {\n  allowRevert: boolean\n}\n\nexport enum RouterTradeType {\n  UniswapTrade = 'UniswapTrade',\n  NFTTrade = 'NFTTrade',\n  UnwrapWETH = 'UnwrapWETH',\n  WrapSTETH = 'WrapSTETH',\n  UnwrapSTETH = 'UnwrapSTETH',\n}\n\n// interface for entities that can be encoded as a Universal Router command\nexport interface Command {\n  tradeType: RouterTradeType\n  encode(planner: RoutePlanner, config: TradeConfig): void\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { SeaportData } from './protocols/seaport'\nimport { FoundationData } from './protocols/foundation'\nimport { NFTXData } from './protocols/nftx'\nimport { NFT20Data } from './protocols/nft20'\nimport { RoutePlanner } from '../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from './Command'\nimport { SudoswapData } from './protocols/sudoswap'\nimport { CryptopunkData } from './protocols/cryptopunk'\nimport { X2Y2Data } from './protocols/x2y2'\nimport { ElementData } from './protocols/element-market'\nimport { LooksRareV2Data } from './protocols/looksRareV2'\n\nexport type SupportedProtocolsData =\n  | SeaportData\n  | FoundationData\n  | NFTXData\n  | LooksRareV2Data\n  | X2Y2Data\n  | CryptopunkData\n  | NFT20Data\n  | SudoswapData\n  | ElementData\n\nexport abstract class NFTTrade<T> implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.NFTTrade\n  readonly orders: T[]\n  readonly market: Market\n\n  constructor(market: Market, orders: T[]) {\n    invariant(orders.length > 0, 'no buy Items')\n    this.market = market\n    this.orders = orders\n  }\n\n  abstract encode(planner: RoutePlanner, config: TradeConfig): void\n\n  abstract getBuyItems(): BuyItem[]\n\n  // optional parameter for the markets that accept ERC20s not just ETH\n  abstract getTotalPrice(token?: string): BigNumber\n}\n\nexport type BuyItem = {\n  tokenAddress: string\n  tokenId: BigNumberish\n  tokenType: TokenType\n  amount?: BigNumberish // for 1155\n}\n\nexport enum Market {\n  Foundation = 'foundation',\n  LooksRareV2 = 'looksrareV2',\n  NFT20 = 'nft20',\n  NFTX = 'nftx',\n  Seaport = 'seaport',\n  Sudoswap = 'Sudoswap',\n  Cryptopunks = 'cryptopunks',\n  X2Y2 = 'x2y2',\n  Element = 'element',\n}\n\nexport enum TokenType {\n  ERC721 = 'ERC721',\n  ERC1155 = 'ERC1155',\n  Cryptopunk = 'Cryptopunk',\n}\n","import { defaultAbiCoder } from 'ethers/lib/utils'\n\n/**\n * CommandTypes\n * @description Flags that modify a command's execution\n * @enum {number}\n */\nexport enum CommandType {\n  V3_SWAP_EXACT_IN = 0x00,\n  V3_SWAP_EXACT_OUT = 0x01,\n  PERMIT2_TRANSFER_FROM = 0x02,\n  PERMIT2_PERMIT_BATCH = 0x03,\n  SWEEP = 0x04,\n  TRANSFER = 0x05,\n  PAY_PORTION = 0x06,\n\n  V2_SWAP_EXACT_IN = 0x08,\n  V2_SWAP_EXACT_OUT = 0x09,\n  PERMIT2_PERMIT = 0x0a,\n  WRAP_ETH = 0x0b,\n  UNWRAP_WETH = 0x0c,\n  PERMIT2_TRANSFER_FROM_BATCH = 0x0d,\n  BALANCE_CHECK_ERC20 = 0x0e,\n\n  // NFT-related command types\n  SEAPORT_V1_5 = 0x10,\n  LOOKS_RARE_V2 = 0x11,\n  NFTX = 0x12,\n  CRYPTOPUNKS = 0x13,\n  // 0x14\n  OWNER_CHECK_721 = 0x15,\n  OWNER_CHECK_1155 = 0x16,\n  SWEEP_ERC721 = 0x17,\n\n  X2Y2_721 = 0x18,\n  SUDOSWAP = 0x19,\n  NFT20 = 0x1a,\n  X2Y2_1155 = 0x1b,\n  FOUNDATION = 0x1c,\n  SWEEP_ERC1155 = 0x1d,\n  ELEMENT_MARKET = 0x1e,\n\n  SEAPORT_V1_4 = 0x20,\n  EXECUTE_SUB_PLAN = 0x21,\n  APPROVE_ERC20 = 0x22,\n  WRAP_STETH = 0x23,\n  UNWRAP_STETH = 0x24,\n}\n\nconst ALLOW_REVERT_FLAG = 0x80\n\nconst REVERTIBLE_COMMANDS = new Set<CommandType>([\n  CommandType.SEAPORT_V1_5,\n  CommandType.SEAPORT_V1_4,\n  CommandType.NFTX,\n  CommandType.LOOKS_RARE_V2,\n  CommandType.X2Y2_721,\n  CommandType.X2Y2_1155,\n  CommandType.FOUNDATION,\n  CommandType.SUDOSWAP,\n  CommandType.NFT20,\n  CommandType.EXECUTE_SUB_PLAN,\n  CommandType.CRYPTOPUNKS,\n  CommandType.ELEMENT_MARKET,\n])\n\nconst PERMIT_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce) details,address spender,uint256 sigDeadline)'\n\nconst PERMIT_BATCH_STRUCT =\n  '((address token,uint160 amount,uint48 expiration,uint48 nonce)[] details,address spender,uint256 sigDeadline)'\n\nconst PERMIT2_TRANSFER_FROM_STRUCT = '(address from,address to,uint160 amount,address token)'\nconst PERMIT2_TRANSFER_FROM_BATCH_STRUCT = PERMIT2_TRANSFER_FROM_STRUCT + '[]'\n\nconst ABI_DEFINITION: { [key in CommandType]: string[] } = {\n  // Batch Reverts\n  [CommandType.EXECUTE_SUB_PLAN]: ['bytes', 'bytes[]'],\n\n  // Permit2 Actions\n  [CommandType.PERMIT2_PERMIT]: [PERMIT_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_PERMIT_BATCH]: [PERMIT_BATCH_STRUCT, 'bytes'],\n  [CommandType.PERMIT2_TRANSFER_FROM]: ['address', 'address', 'uint160'],\n  [CommandType.PERMIT2_TRANSFER_FROM_BATCH]: [PERMIT2_TRANSFER_FROM_BATCH_STRUCT],\n\n  // Uniswap Actions\n  [CommandType.V3_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V3_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'bytes', 'bool'],\n  [CommandType.V2_SWAP_EXACT_IN]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n  [CommandType.V2_SWAP_EXACT_OUT]: ['address', 'uint256', 'uint256', 'address[]', 'bool'],\n\n  // Token Actions and Checks\n  [CommandType.WRAP_ETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_WETH]: ['address', 'uint256'],\n  [CommandType.SWEEP]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC721]: ['address', 'address', 'uint256'],\n  [CommandType.SWEEP_ERC1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.TRANSFER]: ['address', 'address', 'uint256'],\n  [CommandType.PAY_PORTION]: ['address', 'address', 'uint256'],\n  [CommandType.BALANCE_CHECK_ERC20]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_721]: ['address', 'address', 'uint256'],\n  [CommandType.OWNER_CHECK_1155]: ['address', 'address', 'uint256', 'uint256'],\n  [CommandType.APPROVE_ERC20]: ['address', 'uint256'],\n  [CommandType.WRAP_STETH]: ['address', 'uint256'],\n  [CommandType.UNWRAP_STETH]: ['address', 'uint256'],\n\n  // NFT Markets\n  [CommandType.SEAPORT_V1_5]: ['uint256', 'bytes'],\n  [CommandType.SEAPORT_V1_4]: ['uint256', 'bytes'],\n  [CommandType.NFTX]: ['uint256', 'bytes'],\n  [CommandType.LOOKS_RARE_V2]: ['uint256', 'bytes'],\n  [CommandType.X2Y2_721]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.X2Y2_1155]: ['uint256', 'bytes', 'address', 'address', 'uint256', 'uint256'],\n  [CommandType.FOUNDATION]: ['uint256', 'bytes', 'address', 'address', 'uint256'],\n  [CommandType.SUDOSWAP]: ['uint256', 'bytes'],\n  [CommandType.NFT20]: ['uint256', 'bytes'],\n  [CommandType.CRYPTOPUNKS]: ['uint256', 'address', 'uint256'],\n  [CommandType.ELEMENT_MARKET]: ['uint256', 'bytes'],\n}\n\nexport class RoutePlanner {\n  commands: string\n  inputs: string[]\n\n  constructor() {\n    this.commands = '0x'\n    this.inputs = []\n  }\n\n  addSubPlan(subplan: RoutePlanner): void {\n    this.addCommand(CommandType.EXECUTE_SUB_PLAN, [subplan.commands, subplan.inputs], true)\n  }\n\n  addCommand(type: CommandType, parameters: any[], allowRevert = false): void {\n    let command = createCommand(type, parameters)\n    this.inputs.push(command.encodedInput)\n    if (allowRevert) {\n      if (!REVERTIBLE_COMMANDS.has(command.type)) {\n        throw new Error(`command type: ${command.type} cannot be allowed to revert`)\n      }\n      command.type = command.type | ALLOW_REVERT_FLAG\n    }\n\n    this.commands = this.commands.concat(command.type.toString(16).padStart(2, '0'))\n  }\n}\n\nexport type RouterCommand = {\n  type: CommandType\n  encodedInput: string\n}\n\nexport function createCommand(type: CommandType, parameters: any[]): RouterCommand {\n  const encodedInput = defaultAbiCoder.encode(ABI_DEFINITION[type], parameters)\n  return { type, encodedInput }\n}\n","import { BigNumber } from 'ethers'\n\ntype ChainConfig = {\n  router: string\n  creationBlock: number\n  weth: string\n  steth: string\n  wsteth: string\n}\n\nexport const NOT_SUPPORTED_ON_CHAIN = '0x0000000000000000000000000000000000000000'\n\nconst CHAIN_CONFIGS: { [key: number]: ChainConfig } = {\n  // mainnet\n  [1]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2',\n    steth: '0xae7ab96520de3a18e5e111b5eaab095312d7fe84',\n    wsteth: '0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0',\n    creationBlock: 17143817,\n  },\n  // goerli\n  [5]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xb4fbf271143f4fbf7b91a5ded31805e42b2208d6',\n    steth: '0x1643E812aE58766192Cf7D2Cf9567dF2C37e9B7F',\n    wsteth: '0x6320cD32aA674d2898A68ec82e869385Fc5f7E2f',\n    creationBlock: 8940568,\n  },\n  // sepolia\n  [11155111]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xfFf9976782d46CC05630D1f6eBAb18b2324d6B14',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3543575,\n  },\n  // polygon\n  [137]: {\n    router: '0x643770E279d5D0733F21d6DC03A8efbABf3255B4',\n    weth: '0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 46866777,\n  },\n  //polygon mumbai\n  [80001]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x9c3C9283D3e44854697Cd22D3Faa240Cfb032889',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 35176052,\n  },\n  //optimism\n  [10]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 108825869,\n  },\n  // optimism goerli\n  [420]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 8887728,\n  },\n  // arbitrum\n  [42161]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 125861718,\n  },\n  // arbitrum goerli\n  [421613]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: '0xe39Ab88f8A4777030A534146A9Ca3B52bd5D43A3',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 18815277,\n  },\n  // celo\n  [42220]: {\n    router: '0x88a3ED7F21A3fCF6adb86b6F878C5B7a02D20e9b',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 21116361,\n  },\n  // celo alfajores\n  [44787]: {\n    router: '0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD',\n    weth: NOT_SUPPORTED_ON_CHAIN,\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 17566658,\n  },\n  // ethereum classic\n  [61]: {\n    router: '0x0976d8eDFC1a0B1eBD15F6B5c08A82a410F7AAB1',\n    weth: '0x1953cab0E5bFa6D4a9BaD6E05fD46C1CC6527a5a',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 10380055,\n  },\n  // classic mordor\n  [63]: {\n    router: '0x0976d8eDFC1a0B1eBD15F6B5c08A82a410F7AAB1',\n    weth: '0x1953cab0E5bFa6D4a9BaD6E05fD46C1CC6527a5a',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 10380055,\n  },\n  // binance smart chain\n  [56]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0xbb4CdB9CBd36B01bD1cBaEBF2De08d9173bc095c',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 31254967,\n  },\n  // avalanche\n  [43114]: {\n    router: '0x82635AF6146972cD6601161c4472ffe97237D292',\n    weth: '0xB31f66AA3C1e785363F0875A1B74E27b85FD66c7',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 34491144,\n  },\n  // base goerli\n  [84531]: {\n    router: '0xd0872d928672ae2ff74bdb2f5130ac12229cafaf',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 6915289,\n  },\n  // base mainnet\n  [8453]: {\n    router: '0xeC8B0F7Ffe3ae75d7FfAb09429e3675bb63503e4',\n    weth: '0x4200000000000000000000000000000000000006',\n    steth: NOT_SUPPORTED_ON_CHAIN,\n    wsteth: NOT_SUPPORTED_ON_CHAIN,\n    creationBlock: 3229053,\n  },\n}\n\nexport const UNIVERSAL_ROUTER_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].router\n}\n\nexport const UNIVERSAL_ROUTER_CREATION_BLOCK = (chainId: number): number => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n  return CHAIN_CONFIGS[chainId].creationBlock\n}\n\nexport const WETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].weth == NOT_SUPPORTED_ON_CHAIN) throw new Error(`Chain ${chainId} does not have WETH`)\n\n  return CHAIN_CONFIGS[chainId].weth\n}\n\nexport const STETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].steth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have STETH support`)\n\n  return CHAIN_CONFIGS[chainId].steth\n}\n\nexport const WSTETH_ADDRESS = (chainId: number): string => {\n  if (!(chainId in CHAIN_CONFIGS)) throw new Error(`Universal Router not deployed on chain ${chainId}`)\n\n  if (CHAIN_CONFIGS[chainId].wsteth == NOT_SUPPORTED_ON_CHAIN)\n    throw new Error(`Chain ${chainId} does not have WSTETH support`)\n\n  return CHAIN_CONFIGS[chainId].wsteth\n}\n\nexport const PERMIT2_ADDRESS = '0x000000000022D473030F116dDEE9F6B43aC78BA3'\n\nexport const CONTRACT_BALANCE = BigNumber.from(2).pow(255)\nexport const ETH_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const ZERO_ADDRESS = '0x0000000000000000000000000000000000000000'\nexport const MAX_UINT256 = BigNumber.from(2).pow(256).sub(1)\nexport const MAX_UINT160 = BigNumber.from(2).pow(160).sub(1)\n\nexport const SENDER_AS_RECIPIENT = '0x0000000000000000000000000000000000000001'\nexport const ROUTER_AS_RECIPIENT = '0x0000000000000000000000000000000000000002'\n\nexport const OPENSEA_CONDUIT_SPENDER_ID = 0\nexport const SUDOSWAP_SPENDER_ID = 1\n","import { BigNumber } from 'ethers'\nimport JSBI from 'jsbi'\nimport bn from 'bignumber.js'\nimport { Percent } from '@uniswap/sdk-core'\nimport { toHex } from '@uniswap/v3-sdk'\n\nexport function expandTo18DecimalsBN(n: number): BigNumber {\n  // use bn intermediately to allow decimals in intermediate calculations\n  return BigNumber.from(new bn(n).times(new bn(10).pow(18)).toFixed())\n}\n\nexport function expandTo18Decimals(n: number): JSBI {\n  return JSBI.BigInt(BigNumber.from(n).mul(BigNumber.from(10).pow(18)).toString())\n}\n\nexport function encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n","import { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Trade as V2Trade, Pair } from '@uniswap/v2-sdk'\nimport { Trade as V3Trade, Pool, encodeRouteToPath } from '@uniswap/v3-sdk'\nimport {\n  Trade as RouterTrade,\n  MixedRouteTrade,\n  Protocol,\n  IRoute,\n  RouteV2,\n  RouteV3,\n  MixedRouteSDK,\n  MixedRoute,\n  SwapOptions as RouterSwapOptions,\n  getOutputOfPools,\n  encodeMixedRouteToPath,\n  partitionMixedRouteByProtocol,\n} from '@uniswap/router-sdk'\nimport { Permit2Permit } from '../../utils/inputTokens'\nimport { Currency, TradeType, CurrencyAmount, Percent } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { SENDER_AS_RECIPIENT, ROUTER_AS_RECIPIENT, CONTRACT_BALANCE } from '../../utils/constants'\nimport { encodeFeeBips } from '../../utils/numbers'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FlatFeeOptions = {\n  amount: BigNumberish\n  recipient: string\n}\n\n// the existing router permit object doesn't include enough data for permit2\n// so we extend swap options with the permit2 permit\nexport type SwapOptions = Omit<RouterSwapOptions, 'inputTokenPermit'> & {\n  inputTokenPermit?: Permit2Permit\n  payerIsRouter?: boolean\n  flatFee?: FlatFeeOptions\n}\n\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(50, 100)\n\ninterface Swap<TInput extends Currency, TOutput extends Currency> {\n  route: IRoute<TInput, TOutput, Pair | Pool>\n  inputAmount: CurrencyAmount<TInput>\n  outputAmount: CurrencyAmount<TOutput>\n}\n\n// Wrapper for uniswap router-sdk trade entity to encode swaps for Universal Router\n// also translates trade objects from previous (v2, v3) SDKs\nexport class UniswapTrade implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UniswapTrade\n  constructor(public trade: RouterTrade<Currency, Currency, TradeType>, public options: SwapOptions) {\n    if (!!options.fee && !!options.flatFee) throw new Error('Only one fee option permitted')\n  }\n\n  encode(planner: RoutePlanner, _config: TradeConfig): void {\n    let payerIsUser = !this.options.payerIsRouter\n\n    // If the input currency is the native currency, we need to wrap it with the router as the recipient\n    if (this.trade.inputAmount.currency.isNative) {\n      // TODO: optimize if only one v2 pool we can directly send this to the pool\n      planner.addCommand(CommandType.WRAP_ETH, [\n        ROUTER_AS_RECIPIENT,\n        this.trade.maximumAmountIn(this.options.slippageTolerance).quotient.toString(),\n      ])\n      // since WETH is now owned by the router, the router pays for inputs\n      payerIsUser = false\n    }\n    // The overall recipient at the end of the trade, SENDER_AS_RECIPIENT uses the msg.sender\n    this.options.recipient = this.options.recipient ?? SENDER_AS_RECIPIENT\n\n    // flag for whether we want to perform slippage check on aggregate output of multiple routes\n    //   1. when there are >2 exact input trades. this is only a heuristic,\n    //      as it's still more gas-expensive even in this case, but has benefits\n    //      in that the reversion probability is lower\n    const performAggregatedSlippageCheck =\n      this.trade.tradeType === TradeType.EXACT_INPUT && this.trade.routes.length > 2\n    const outputIsNative = this.trade.outputAmount.currency.isNative\n    const inputIsNative = this.trade.inputAmount.currency.isNative\n    const routerMustCustody = performAggregatedSlippageCheck || outputIsNative || hasFeeOption(this.options)\n\n    for (const swap of this.trade.swaps) {\n      switch (swap.route.protocol) {\n        case Protocol.V2:\n          addV2Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.V3:\n          addV3Swap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        case Protocol.MIXED:\n          addMixedSwap(planner, swap, this.trade.tradeType, this.options, payerIsUser, routerMustCustody)\n          break\n        default:\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\n      }\n    }\n\n    let minimumAmountOut: BigNumber = BigNumber.from(\n      this.trade.minimumAmountOut(this.options.slippageTolerance).quotient.toString()\n    )\n\n    // The router custodies for 3 reasons: to unwrap, to take a fee, and/or to do a slippage check\n    if (routerMustCustody) {\n      // If there is a fee, that percentage is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.fee) {\n        const feeBips = encodeFeeBips(this.options.fee.fee)\n        planner.addCommand(CommandType.PAY_PORTION, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.fee.recipient,\n          feeBips,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(minimumAmountOut.mul(feeBips).div(10000))\n        }\n      }\n\n      // If there is a flat fee, that absolute amount is sent to the fee recipient\n      // In the case where ETH is the output currency, the fee is taken in WETH (for gas reasons)\n      if (!!this.options.flatFee) {\n        const feeAmount = this.options.flatFee.amount\n        if (minimumAmountOut.lt(feeAmount)) throw new Error('Flat fee amount greater than minimumAmountOut')\n\n        planner.addCommand(CommandType.TRANSFER, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.flatFee.recipient,\n          feeAmount,\n        ])\n\n        // If the trade is exact output, and a fee was taken, we must adjust the amount out to be the amount after the fee\n        // Otherwise we continue as expected with the trade's normal expected output\n        if (this.trade.tradeType === TradeType.EXACT_OUTPUT) {\n          minimumAmountOut = minimumAmountOut.sub(feeAmount)\n        }\n      }\n\n      // The remaining tokens that need to be sent to the user after the fee is taken will be caught\n      // by this if-else clause.\n      if (outputIsNative) {\n        planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, minimumAmountOut])\n      } else {\n        planner.addCommand(CommandType.SWEEP, [\n          this.trade.outputAmount.currency.wrapped.address,\n          this.options.recipient,\n          minimumAmountOut,\n        ])\n      }\n    }\n\n    if (inputIsNative && (this.trade.tradeType === TradeType.EXACT_OUTPUT || riskOfPartialFill(this.trade))) {\n      // for exactOutput swaps that take native currency as input\n      // we need to send back the change to the user\n      planner.addCommand(CommandType.UNWRAP_WETH, [this.options.recipient, 0])\n    }\n  }\n}\n\n// encode a uniswap v2 swap\nfunction addV2Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = new V2Trade(\n    route as unknown as RouteV2<TInput, TOutput>,\n    tradeType == TradeType.EXACT_INPUT ? inputAmount : outputAmount,\n    tradeType\n  )\n\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n      // if native, we have to unwrap so keep in the router for now\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V2_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      route.path.map((pool) => pool.address),\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a uniswap v3 swap\nfunction addV3Swap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  { route, inputAmount, outputAmount }: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const trade = V3Trade.createUncheckedTrade({\n    route: route as RouteV3<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const path = encodeRouteToPath(route as RouteV3<TInput, TOutput>, trade.tradeType === TradeType.EXACT_OUTPUT)\n  if (tradeType == TradeType.EXACT_INPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  } else if (tradeType == TradeType.EXACT_OUTPUT) {\n    planner.addCommand(CommandType.V3_SWAP_EXACT_OUT, [\n      routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient,\n      trade.minimumAmountOut(options.slippageTolerance).quotient.toString(),\n      trade.maximumAmountIn(options.slippageTolerance).quotient.toString(),\n      path,\n      payerIsUser,\n    ])\n  }\n}\n\n// encode a mixed route swap, i.e. including both v2 and v3 pools\nfunction addMixedSwap<TInput extends Currency, TOutput extends Currency>(\n  planner: RoutePlanner,\n  swap: Swap<TInput, TOutput>,\n  tradeType: TradeType,\n  options: SwapOptions,\n  payerIsUser: boolean,\n  routerMustCustody: boolean\n): void {\n  const { route, inputAmount, outputAmount } = swap\n  const tradeRecipient = routerMustCustody ? ROUTER_AS_RECIPIENT : options.recipient\n\n  // single hop, so it can be reduced to plain v2 or v3 swap logic\n  if (route.pools.length === 1) {\n    if (route.pools[0] instanceof Pool) {\n      return addV3Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else if (route.pools[0] instanceof Pair) {\n      return addV2Swap(planner, swap, tradeType, options, payerIsUser, routerMustCustody)\n    } else {\n      throw new Error('Invalid route type')\n    }\n  }\n\n  const trade = MixedRouteTrade.createUncheckedTrade({\n    route: route as MixedRoute<TInput, TOutput>,\n    inputAmount,\n    outputAmount,\n    tradeType,\n  })\n\n  const amountIn = trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient.toString()\n  const amountOut = trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient.toString()\n\n  // logic from\n  // https://github.com/Uniswap/router-sdk/blob/d8eed164e6c79519983844ca8b6a3fc24ebcb8f8/src/swapRouter.ts#L276\n  const sections = partitionMixedRouteByProtocol(route as MixedRoute<TInput, TOutput>)\n  const isLastSectionInRoute = (i: number) => {\n    return i === sections.length - 1\n  }\n\n  let outputToken\n  let inputToken = route.input.wrapped\n\n  for (let i = 0; i < sections.length; i++) {\n    const section = sections[i]\n    /// Now, we get output of this section\n    outputToken = getOutputOfPools(section, inputToken)\n\n    const newRouteOriginal = new MixedRouteSDK(\n      [...section],\n      section[0].token0.equals(inputToken) ? section[0].token0 : section[0].token1,\n      outputToken\n    )\n    const newRoute = new MixedRoute(newRouteOriginal)\n\n    /// Previous output is now input\n    inputToken = outputToken\n\n    const mixedRouteIsAllV3 = (route: MixedRouteSDK<Currency, Currency>) => {\n      return route.pools.every((pool) => pool instanceof Pool)\n    }\n\n    if (mixedRouteIsAllV3(newRoute)) {\n      const path: string = encodeMixedRouteToPath(newRoute)\n\n      planner.addCommand(CommandType.V3_SWAP_EXACT_IN, [\n        // if not last section: send tokens directly to the first v2 pair of the next section\n        // note: because of the partitioning function we can be sure that the next section is v2\n        isLastSectionInRoute(i) ? tradeRecipient : (sections[i + 1][0] as Pair).liquidityToken.address,\n        i == 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOut\n        path, // path\n        payerIsUser && i === 0, // payerIsUser\n      ])\n    } else {\n      planner.addCommand(CommandType.V2_SWAP_EXACT_IN, [\n        isLastSectionInRoute(i) ? tradeRecipient : ROUTER_AS_RECIPIENT, // recipient\n        i === 0 ? amountIn : CONTRACT_BALANCE, // amountIn\n        !isLastSectionInRoute(i) ? 0 : amountOut, // amountOutMin\n        newRoute.path.map((pool) => pool.address), // path\n        payerIsUser && i === 0,\n      ])\n    }\n  }\n}\n\n// if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\nfunction riskOfPartialFill(trade: RouterTrade<Currency, Currency, TradeType>): boolean {\n  return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\n}\n\nfunction hasFeeOption(swapOptions: SwapOptions): boolean {\n  return !!swapOptions.fee || !!swapOptions.flatFee\n}\n","import invariant from 'tiny-invariant'\nimport { ethers } from 'ethers'\nimport { PermitSingle } from '@uniswap/permit2-sdk'\nimport { CommandType, RoutePlanner } from './routerCommands'\nimport { OPENSEA_CONDUIT_SPENDER_ID, ROUTER_AS_RECIPIENT, SUDOSWAP_SPENDER_ID } from './constants'\n\nexport interface Permit2Permit extends PermitSingle {\n  signature: string\n}\n\nexport type ApproveProtocol = {\n  token: string\n  protocol: string\n}\n\nexport type Permit2TransferFrom = {\n  token: string\n  amount: string\n  recipient?: string\n}\n\nexport type InputTokenOptions = {\n  approval?: ApproveProtocol\n  permit2Permit?: Permit2Permit\n  permit2TransferFrom?: Permit2TransferFrom\n}\n\nconst SIGNATURE_LENGTH = 65\nconst EIP_2098_SIGNATURE_LENGTH = 64\n\nexport function encodePermit(planner: RoutePlanner, permit2: Permit2Permit): void {\n  let signature = permit2.signature\n\n  const length = ethers.utils.arrayify(permit2.signature).length\n  // signature data provided for EIP-1271 may have length different from ECDSA signature\n  if (length === SIGNATURE_LENGTH || length === EIP_2098_SIGNATURE_LENGTH) {\n    // sanitizes signature to cover edge cases of malformed EIP-2098 sigs and v used as recovery id\n    signature = ethers.utils.joinSignature(ethers.utils.splitSignature(permit2.signature))\n  }\n\n  planner.addCommand(CommandType.PERMIT2_PERMIT, [permit2, signature])\n}\n\n// Handles the encoding of commands needed to gather input tokens for a trade\n// Approval: The router approving another address to take tokens.\n//   note: Only seaport and sudoswap support this action. Approvals are left open.\n// Permit: A Permit2 signature-based Permit to allow the router to access a user's tokens\n// Transfer: A Permit2 TransferFrom of tokens from a user to either the router or another address\nexport function encodeInputTokenOptions(planner: RoutePlanner, options: InputTokenOptions) {\n  // first ensure that all tokens provided for encoding are the same\n  if (!!options.approval && !!options.permit2Permit)\n    invariant(options.approval.token === options.permit2Permit.details.token, `inconsistent token`)\n  if (!!options.approval && !!options.permit2TransferFrom)\n    invariant(options.approval.token === options.permit2TransferFrom.token, `inconsistent token`)\n  if (!!options.permit2TransferFrom && !!options.permit2Permit)\n    invariant(options.permit2TransferFrom.token === options.permit2Permit.details.token, `inconsistent token`)\n\n  // if an options.approval is required, add it\n  if (!!options.approval) {\n    planner.addCommand(CommandType.APPROVE_ERC20, [\n      options.approval.token,\n      mapApprovalProtocol(options.approval.protocol),\n    ])\n  }\n\n  // if this order has a options.permit2Permit, encode it\n  if (!!options.permit2Permit) {\n    encodePermit(planner, options.permit2Permit)\n  }\n\n  if (!!options.permit2TransferFrom) {\n    planner.addCommand(CommandType.PERMIT2_TRANSFER_FROM, [\n      options.permit2TransferFrom.token,\n      options.permit2TransferFrom.recipient ? options.permit2TransferFrom.recipient : ROUTER_AS_RECIPIENT,\n      options.permit2TransferFrom.amount,\n    ])\n  }\n}\n\nfunction mapApprovalProtocol(protocolAddress: string): number {\n  switch (protocolAddress.toLowerCase()) {\n    case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n      return OPENSEA_CONDUIT_SPENDER_ID\n    case '0x2b2e8cda09bba9660dca5cb6233787738ad68329': // Sudoswap\n      return SUDOSWAP_SPENDER_ID\n    default:\n      throw new Error('unsupported protocol address')\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/universal-router/artifacts/contracts/UniversalRouter.sol/UniversalRouter.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BigNumber, BigNumberish } from 'ethers'\nimport { MethodParameters } from '@uniswap/v3-sdk'\nimport { Trade as RouterTrade } from '@uniswap/router-sdk'\nimport { Currency, TradeType } from '@uniswap/sdk-core'\nimport { Command, RouterTradeType } from './entities/Command'\nimport { Market, NFTTrade, SupportedProtocolsData } from './entities/NFTTrade'\nimport { UniswapTrade, SwapOptions } from './entities/protocols/uniswap'\nimport { UnwrapWETH } from './entities/protocols/unwrapWETH'\nimport { CommandType, RoutePlanner } from './utils/routerCommands'\nimport { encodePermit } from './utils/inputTokens'\nimport { ROUTER_AS_RECIPIENT, SENDER_AS_RECIPIENT, ETH_ADDRESS } from './utils/constants'\nimport { SeaportTrade } from './entities'\n\nexport type SwapRouterConfig = {\n  sender?: string // address\n  deadline?: BigNumberish\n}\n\ntype SupportedNFTTrade = NFTTrade<SupportedProtocolsData>\n\nexport abstract class SwapRouter {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  public static swapCallParameters(trades: Command[] | Command, config: SwapRouterConfig = {}): MethodParameters {\n    if (!Array.isArray(trades)) trades = [trades]\n\n    const nftTrades = trades.filter((trade, _, []) => trade.hasOwnProperty('market')) as SupportedNFTTrade[]\n    const allowRevert = nftTrades.length == 1 && nftTrades[0].orders.length == 1 ? false : true\n    const planner = new RoutePlanner()\n\n    // track value flow to require the right amount of native value\n    let currentNativeValueInRouter = BigNumber.from(0)\n    let transactionValue = BigNumber.from(0)\n\n    // tracks the input tokens (and ETH) used to buy NFTs to allow us to sweep\n    let nftInputTokens = new Set<string>()\n\n    for (const trade of trades) {\n      /**\n       * is NFTTrade\n       */\n      if (trade.tradeType == RouterTradeType.NFTTrade) {\n        const nftTrade = trade as SupportedNFTTrade\n        nftTrade.encode(planner, { allowRevert })\n        const tradePrice = nftTrade.getTotalPrice()\n\n        if (nftTrade.market == Market.Seaport) {\n          const seaportTrade = nftTrade as SeaportTrade\n          const seaportInputTokens = seaportTrade.getInputTokens()\n          seaportInputTokens.forEach((inputToken) => {\n            nftInputTokens.add(inputToken)\n          })\n        } else {\n          nftInputTokens.add(ETH_ADDRESS)\n        }\n\n        // send enough native value to contract for NFT purchase\n        if (currentNativeValueInRouter.lt(tradePrice)) {\n          transactionValue = transactionValue.add(tradePrice.sub(currentNativeValueInRouter))\n          currentNativeValueInRouter = BigNumber.from(0)\n        } else {\n          currentNativeValueInRouter = currentNativeValueInRouter.sub(tradePrice)\n        }\n        /**\n         * is UniswapTrade\n         */\n      } else if (trade.tradeType == RouterTradeType.UniswapTrade) {\n        const uniswapTrade = trade as UniswapTrade\n        const inputIsNative = uniswapTrade.trade.inputAmount.currency.isNative\n        const outputIsNative = uniswapTrade.trade.outputAmount.currency.isNative\n        const swapOptions = uniswapTrade.options\n\n        invariant(!(inputIsNative && !!swapOptions.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n        if (!!swapOptions.inputTokenPermit) {\n          encodePermit(planner, swapOptions.inputTokenPermit)\n        }\n\n        if (inputIsNative) {\n          transactionValue = transactionValue.add(\n            BigNumber.from(uniswapTrade.trade.maximumAmountIn(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        // track amount of native currency in the router\n        if (outputIsNative && swapOptions.recipient == ROUTER_AS_RECIPIENT) {\n          currentNativeValueInRouter = currentNativeValueInRouter.add(\n            BigNumber.from(uniswapTrade.trade.minimumAmountOut(swapOptions.slippageTolerance).quotient.toString())\n          )\n        }\n        uniswapTrade.encode(planner, { allowRevert: false })\n        /**\n         * is UnwrapWETH\n         */\n      } else if (trade.tradeType == RouterTradeType.UnwrapWETH) {\n        const UnwrapWETH = trade as UnwrapWETH\n        trade.encode(planner, { allowRevert: false })\n        currentNativeValueInRouter = currentNativeValueInRouter.add(UnwrapWETH.amount)\n        /**\n         * is (Un)WrapSTETH\n         */\n      } else if (trade.tradeType == RouterTradeType.WrapSTETH || trade.tradeType == RouterTradeType.UnwrapSTETH) {\n        trade.encode(planner, { allowRevert: false })\n        /**\n         * else\n         */\n      } else {\n        throw 'trade must be of instance: UniswapTrade, NFTTrade, UnwrapWETH, WrapSTETH'\n      }\n    }\n\n    // TODO: matches current logic for now, but should eventually only sweep for multiple NFT trades\n    // or NFT trades with potential slippage (i.e. sudo).\n    // Note: NFTXV2 sends excess ETH to the caller (router), not the specified recipient\n    nftInputTokens.forEach((inputToken) => {\n      planner.addCommand(CommandType.SWEEP, [inputToken, SENDER_AS_RECIPIENT, 0])\n    })\n    return SwapRouter.encodePlan(planner, transactionValue, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * This version does not work correctly for Seaport ERC20->NFT purchases\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given swap.\n   * @param trades to produce call parameters for\n   */\n  public static swapNFTCallParameters(trades: SupportedNFTTrade[], config: SwapRouterConfig = {}): MethodParameters {\n    let planner = new RoutePlanner()\n    let totalPrice = BigNumber.from(0)\n\n    const allowRevert = trades.length == 1 && trades[0].orders.length == 1 ? false : true\n\n    for (const trade of trades) {\n      trade.encode(planner, { allowRevert })\n      totalPrice = totalPrice.add(trade.getTotalPrice())\n    }\n\n    planner.addCommand(CommandType.SWEEP, [ETH_ADDRESS, SENDER_AS_RECIPIENT, 0])\n    return SwapRouter.encodePlan(planner, totalPrice, config)\n  }\n\n  /**\n   * @deprecated in favor of swapCallParameters. Update before next major version 2.0.0\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\n   * @param trades to produce call parameters for\n   * @param options options for the call parameters\n   */\n  public static swapERC20CallParameters(\n    trades: RouterTrade<Currency, Currency, TradeType>,\n    options: SwapOptions\n  ): MethodParameters {\n    // TODO: use permit if signature included in swapOptions\n    const planner = new RoutePlanner()\n\n    const trade: UniswapTrade = new UniswapTrade(trades, options)\n\n    const inputCurrency = trade.trade.inputAmount.currency\n    invariant(!(inputCurrency.isNative && !!options.inputTokenPermit), 'NATIVE_INPUT_PERMIT')\n\n    if (options.inputTokenPermit) {\n      encodePermit(planner, options.inputTokenPermit)\n    }\n\n    const nativeCurrencyValue = inputCurrency.isNative\n      ? BigNumber.from(trade.trade.maximumAmountIn(options.slippageTolerance).quotient.toString())\n      : BigNumber.from(0)\n\n    trade.encode(planner, { allowRevert: false })\n    return SwapRouter.encodePlan(planner, nativeCurrencyValue, {\n      deadline: options.deadlineOrPreviousBlockhash ? BigNumber.from(options.deadlineOrPreviousBlockhash) : undefined,\n    })\n  }\n\n  /**\n   * Encodes a planned route into a method name and parameters for the Router contract.\n   * @param planner the planned route\n   * @param nativeCurrencyValue the native currency value of the planned route\n   * @param config the router config\n   */\n  private static encodePlan(\n    planner: RoutePlanner,\n    nativeCurrencyValue: BigNumber,\n    config: SwapRouterConfig = {}\n  ): MethodParameters {\n    const { commands, inputs } = planner\n    const functionSignature = !!config.deadline ? 'execute(bytes,bytes[],uint256)' : 'execute(bytes,bytes[])'\n    const parameters = !!config.deadline ? [commands, inputs, config.deadline] : [commands, inputs]\n    const calldata = SwapRouter.INTERFACE.encodeFunctionData(functionSignature, parameters)\n    return { calldata, value: nativeCurrencyValue.toHexString() }\n  }\n}\n","import { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type CryptopunkData = {\n  tokenId: BigNumberish\n  recipient: string\n  value: BigNumberish\n}\n\nexport class CryptopunkTrade extends NFTTrade<CryptopunkData> {\n  public static CRYPTOPUNK_ADDRESS: string = '0xb47e3cd837ddf8e4c57f05d70ab865de6e193bbb'\n\n  constructor(orders: CryptopunkData[]) {\n    super(Market.Cryptopunks, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      planner.addCommand(CommandType.CRYPTOPUNKS, [item.tokenId, item.recipient, item.value], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: CryptopunkTrade.CRYPTOPUNK_ADDRESS,\n        tokenId: item.tokenId,\n        tokenType: TokenType.Cryptopunk,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/Foundation.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type FoundationData = {\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n  referrer: string // address\n}\n\nexport class FoundationTrade extends NFTTrade<FoundationData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: FoundationData[]) {\n    super(Market.Foundation, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const calldata = FoundationTrade.INTERFACE.encodeFunctionData('buyV2', [\n        item.tokenAddress,\n        item.tokenId,\n        item.price,\n        item.referrer,\n      ])\n      planner.addCommand(\n        CommandType.FOUNDATION,\n        [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: TokenType.ERC721,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/LooksRareV2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber } from 'ethers'\nimport { ZERO_ADDRESS } from '../../utils/constants'\n\nexport type MakerOrder = {\n  quoteType: number\n  globalNonce: string\n  subsetNonce: string\n  orderNonce: string\n  strategyId: number\n  collectionType: number\n  collection: string\n  currency: string\n  signer: string\n  startTime: number\n  endTime: number\n  price: string\n  itemIds: string[]\n  amounts: string[]\n  additionalParameters: string\n}\n\nexport type TakerOrder = {\n  recipient: string\n  additionalParameters: string\n}\n\nexport type MerkleProof = {\n  value: string\n  position: number\n}\n\nexport type MerkleTree = {\n  root: string\n  proof: MerkleProof[]\n}\n\nexport type LRV2APIOrder = MakerOrder & {\n  id: string\n  hash: string\n  signature: string\n  createdAt: string\n  merkleRoot?: string\n  merkleProof?: MerkleProof[]\n  status: string\n}\n\nexport type LooksRareV2Data = {\n  apiOrder: LRV2APIOrder\n  taker: string\n}\n\nexport class LooksRareV2Trade extends NFTTrade<LooksRareV2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n  private static ERC721_ORDER = 0\n\n  constructor(orders: LooksRareV2Data[]) {\n    super(Market.LooksRareV2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    const { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees } = this.refactorAPIData(this.orders)\n\n    let calldata\n    if (this.orders.length == 1) {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeTakerBid', [\n        takerBids[0],\n        makerOrders[0],\n        makerSignatures[0],\n        merkleTrees[0],\n        ZERO_ADDRESS, // affiliate\n      ])\n    } else {\n      calldata = LooksRareV2Trade.INTERFACE.encodeFunctionData('executeMultipleTakerBids', [\n        takerBids,\n        makerOrders,\n        makerSignatures,\n        merkleTrees,\n        ZERO_ADDRESS, // affiliate\n        false, // isAtomic (we deal with this in allowRevert)\n      ])\n    }\n\n    planner.addCommand(CommandType.LOOKS_RARE_V2, [totalValue, calldata], config.allowRevert)\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      const tokenAddress = item.apiOrder.collection\n      const tokenType =\n        item.apiOrder.collectionType == LooksRareV2Trade.ERC721_ORDER ? TokenType.ERC721 : TokenType.ERC1155\n      for (const tokenId of item.apiOrder.itemIds)\n        buyItems.push({\n          tokenAddress,\n          tokenId,\n          tokenType,\n        })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.apiOrder.price)\n    }\n    return total\n  }\n\n  private refactorAPIData(orders: LooksRareV2Data[]): {\n    takerBids: TakerOrder[]\n    makerOrders: MakerOrder[]\n    makerSignatures: string[]\n    totalValue: BigNumber\n    merkleTrees: MerkleTree[]\n  } {\n    let takerBids: TakerOrder[] = []\n    let makerOrders: MakerOrder[] = []\n    let makerSignatures: string[] = []\n    let totalValue: BigNumber = BigNumber.from(0)\n    let merkleTrees: MerkleTree[] = []\n\n    orders.forEach((order) => {\n      makerOrders.push({ ...order.apiOrder })\n\n      makerSignatures.push(order.apiOrder.signature)\n\n      takerBids.push({\n        recipient: order.taker,\n        additionalParameters: '0x',\n      })\n\n      totalValue = totalValue.add(BigNumber.from(order.apiOrder.price))\n\n      merkleTrees.push({\n        root: order.apiOrder.merkleRoot ?? '0x0000000000000000000000000000000000000000000000000000000000000000',\n        proof: order.apiOrder.merkleProof ?? [],\n      })\n    })\n\n    return { takerBids, makerOrders, makerSignatures, totalValue, merkleTrees }\n  }\n}\n","import abi from '../../../abis/NFT20.json'\nimport { Interface } from '@ethersproject/abi'\nimport { TradeConfig } from '../Command'\nimport { NFTTrade, Market, TokenType, BuyItem } from '../NFTTrade'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFT20Data = {\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  tokenAmounts: BigNumberish[]\n  recipient: string\n  fee: BigNumberish\n  isV3: boolean\n  value: BigNumberish\n}\n\nexport class NFT20Trade extends NFTTrade<NFT20Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFT20Data[]) {\n    super(Market.NFT20, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFT20Trade.INTERFACE.encodeFunctionData('ethForNft', [\n        order.tokenAddress,\n        order.tokenIds,\n        order.tokenAmounts,\n        order.recipient,\n        order.fee,\n        order.isV3,\n      ])\n      planner.addCommand(CommandType.NFT20, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const pool of this.orders) {\n      for (const tokenId of pool.tokenIds) {\n        buyItems.push({\n          tokenAddress: pool.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/NFTXZap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\nexport type NFTXData = {\n  recipient: string\n  vaultId: BigNumberish\n  tokenAddress: string\n  tokenIds: BigNumberish[]\n  value: BigNumber\n  swapCalldata: string\n}\n\nexport class NFTXTrade extends NFTTrade<NFTXData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: NFTXData[]) {\n    super(Market.NFTX, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = NFTXTrade.INTERFACE.encodeFunctionData('buyAndRedeem', [\n        order.vaultId,\n        order.tokenIds.length,\n        order.tokenIds,\n        order.swapCalldata,\n        order.recipient,\n      ])\n\n      planner.addCommand(CommandType.NFTX, [order.value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const tokenId of order.tokenIds) {\n        buyItems.push({\n          tokenAddress: order.tokenAddress,\n          tokenId: tokenId,\n          tokenType: TokenType.ERC721,\n        })\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.value)\n    }\n    return total\n  }\n}\n","import { BigNumber, BigNumberish } from 'ethers'\nimport { Interface } from '@ethersproject/abi'\nimport abi from '../../../abis/Seaport.json'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { ETH_ADDRESS } from '../../utils/constants'\n\nexport type SeaportData = {\n  items: Order[]\n  recipient: string // address\n  protocolAddress: string\n  inputTokenProcessing?: InputTokenProcessing[]\n}\n\nexport type InputTokenProcessing = {\n  token: string\n  permit2Permit?: Permit2Permit\n  protocolApproval: boolean\n  permit2TransferFrom: boolean\n}\n\nexport type FulfillmentComponent = {\n  orderIndex: BigNumberish\n  itemIndex: BigNumberish\n}\n\nexport type OfferItem = {\n  itemType: BigNumberish // enum\n  token: string // address\n  identifierOrCriteria: BigNumberish\n  startAmount: BigNumberish\n  endAmount: BigNumberish\n}\n\nexport type ConsiderationItem = OfferItem & {\n  recipient: string\n}\n\nexport type Order = {\n  parameters: OrderParameters\n  signature: string\n}\n\ntype OrderParameters = {\n  offerer: string // address,\n  offer: OfferItem[]\n  consideration: ConsiderationItem[]\n  orderType: BigNumberish // enum\n  startTime: BigNumberish\n  endTime: BigNumberish\n  zoneHash: string // bytes32\n  zone: string // address\n  salt: BigNumberish\n  conduitKey: string // bytes32,\n  totalOriginalConsiderationItems: BigNumberish\n}\n\nexport type AdvancedOrder = Order & {\n  numerator: BigNumber // uint120\n  denominator: BigNumber // uint120\n  extraData: string // bytes\n}\n\nexport class SeaportTrade extends NFTTrade<SeaportData> {\n  public static INTERFACE: Interface = new Interface(abi)\n  public static OPENSEA_CONDUIT_KEY: string = '0x0000007b02230091a7ed01230072f7006a004d60a8d4e71d599b8104250f0000'\n\n  constructor(orders: SeaportData[]) {\n    super(Market.Seaport, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      let advancedOrders: AdvancedOrder[] = []\n      let orderFulfillments: FulfillmentComponent[][] = order.items.map((_, index) => [\n        { orderIndex: index, itemIndex: 0 },\n      ])\n      let considerationFulFillments: FulfillmentComponent[][] = this.getConsiderationFulfillments(order.items)\n\n      for (const item of order.items) {\n        const { advancedOrder } = this.getAdvancedOrderParams(item)\n        advancedOrders.push(advancedOrder)\n      }\n\n      let calldata: string\n      if (advancedOrders.length == 1) {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAdvancedOrder', [\n          advancedOrders[0],\n          [],\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n        ])\n      } else {\n        calldata = SeaportTrade.INTERFACE.encodeFunctionData('fulfillAvailableAdvancedOrders', [\n          advancedOrders,\n          [],\n          orderFulfillments,\n          considerationFulFillments,\n          SeaportTrade.OPENSEA_CONDUIT_KEY,\n          order.recipient,\n          100, // TODO: look into making this a better number\n        ])\n      }\n\n      if (!!order.inputTokenProcessing) {\n        for (const inputToken of order.inputTokenProcessing)\n          encodeInputTokenOptions(planner, {\n            approval: inputToken.protocolApproval\n              ? { token: inputToken.token, protocol: order.protocolAddress }\n              : undefined,\n            permit2Permit: inputToken.permit2Permit,\n            permit2TransferFrom: inputToken.permit2TransferFrom\n              ? { token: inputToken.token, amount: this.getTotalOrderPrice(order, inputToken.token).toString() }\n              : undefined,\n          })\n      }\n\n      planner.addCommand(\n        this.commandMap(order.protocolAddress),\n        [this.getTotalOrderPrice(order, ETH_ADDRESS).toString(), calldata],\n        config.allowRevert\n      )\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const offer of item.parameters.offer) {\n          buyItems.push({\n            tokenAddress: offer.token,\n            tokenId: offer.identifierOrCriteria,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getInputTokens(): Set<string> {\n    let inputTokens = new Set<string>()\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        for (const consideration of item.parameters.consideration) {\n          const token = consideration.token.toLowerCase()\n          inputTokens.add(token)\n        }\n      }\n    }\n    return inputTokens\n  }\n\n  getTotalOrderPrice(order: SeaportData, token: string = ETH_ADDRESS): BigNumber {\n    let totalOrderPrice = BigNumber.from(0)\n    for (const item of order.items) {\n      totalOrderPrice = totalOrderPrice.add(this.calculateValue(item.parameters.consideration, token))\n    }\n    return totalOrderPrice\n  }\n\n  getTotalPrice(token: string = ETH_ADDRESS): BigNumber {\n    let totalPrice = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const item of order.items) {\n        totalPrice = totalPrice.add(this.calculateValue(item.parameters.consideration, token))\n      }\n    }\n    return totalPrice\n  }\n\n  private commandMap(protocolAddress: string): CommandType {\n    switch (protocolAddress.toLowerCase()) {\n      case '0x00000000000000adc04c56bf30ac9d3c0aaf14dc': // Seaport v1.5\n        return CommandType.SEAPORT_V1_5\n      case '0x00000000000001ad428e4906ae43d8f9852d0dd6': // Seaport v1.4\n        return CommandType.SEAPORT_V1_4\n      default:\n        throw new Error('unsupported Seaport address')\n    }\n  }\n\n  private getConsiderationFulfillments(protocolDatas: Order[]): FulfillmentComponent[][] {\n    let considerationFulfillments: FulfillmentComponent[][] = []\n    const considerationRecipients: string[] = []\n\n    for (const i in protocolDatas) {\n      const protocolData = protocolDatas[i]\n\n      for (const j in protocolData.parameters.consideration) {\n        const item = protocolData.parameters.consideration[j]\n\n        if (considerationRecipients.findIndex((x) => x === item.recipient) === -1) {\n          considerationRecipients.push(item.recipient)\n        }\n\n        const recipientIndex = considerationRecipients.findIndex((x) => x === item.recipient)\n\n        if (!considerationFulfillments[recipientIndex]) {\n          considerationFulfillments.push([\n            {\n              orderIndex: i,\n              itemIndex: j,\n            },\n          ])\n        } else {\n          considerationFulfillments[recipientIndex].push({\n            orderIndex: i,\n            itemIndex: j,\n          })\n        }\n      }\n    }\n    return considerationFulfillments\n  }\n\n  private getAdvancedOrderParams(data: Order): { advancedOrder: AdvancedOrder } {\n    const advancedOrder = {\n      parameters: data.parameters,\n      numerator: BigNumber.from('1'),\n      denominator: BigNumber.from('1'),\n      signature: data.signature,\n      extraData: '0x00',\n    }\n    return { advancedOrder }\n  }\n\n  private calculateValue(considerations: ConsiderationItem[], token: string): BigNumber {\n    return considerations.reduce(\n      (amt: BigNumber, consideration: ConsiderationItem) =>\n        consideration.token.toLowerCase() == token.toLowerCase() ? amt.add(consideration.startAmount) : amt,\n      BigNumber.from(0)\n    )\n  }\n}\n","import abi from '../../../abis/Sudoswap.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype PairSwap = {\n  swapInfo: {\n    pair: string // address\n    nftIds: BigNumberish[]\n  }\n  tokenAddress: string // address\n  maxCost: BigNumberish\n}\n\nexport type SudoswapData = {\n  swaps: PairSwap[]\n  nftRecipient: string\n  ethRecipient: string\n  deadline: BigNumberish\n}\n\nexport class SudoswapTrade extends NFTTrade<SudoswapData> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: SudoswapData[]) {\n    super(Market.Sudoswap, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const order of this.orders) {\n      const calldata = SudoswapTrade.INTERFACE.encodeFunctionData('robustSwapETHForSpecificNFTs', [\n        order.swaps.map((swap) => {\n          return { swapInfo: swap.swapInfo, maxCost: swap.maxCost }\n        }),\n        order.ethRecipient,\n        order.nftRecipient,\n        order.deadline,\n      ])\n      const value = order.swaps.reduce((prevVal, swap) => {\n        return prevVal.add(swap.maxCost)\n      }, BigNumber.from(0))\n      planner.addCommand(CommandType.SUDOSWAP, [value, calldata], config.allowRevert)\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        for (const tokenId of swap.swapInfo.nftIds) {\n          buyItems.push({\n            tokenAddress: swap.tokenAddress,\n            tokenId,\n            tokenType: TokenType.ERC721,\n          })\n        }\n      }\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const order of this.orders) {\n      for (const swap of order.swaps) {\n        total = total.add(swap.maxCost)\n      }\n    }\n    return total\n  }\n}\n","import abi from '../../../abis/X2Y2.json'\nimport { Interface } from '@ethersproject/abi'\nimport { BuyItem, Market, NFTTrade, TokenType } from '../NFTTrade'\nimport { TradeConfig } from '../Command'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { BigNumber, BigNumberish } from 'ethers'\n\ntype X2Y2PartialData = {\n  signedInput: string\n  recipient: string\n  tokenAddress: string\n  tokenId: BigNumberish\n  price: BigNumberish\n}\n\nexport type X2Y2_721_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC721\n}\n\nexport type X2Y2_1155_Data = X2Y2PartialData & {\n  tokenType: TokenType.ERC1155\n  tokenAmount: BigNumberish\n}\n\nexport type X2Y2Data = X2Y2_721_Data | X2Y2_1155_Data\n\nexport class X2Y2Trade extends NFTTrade<X2Y2Data> {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  constructor(orders: X2Y2Data[]) {\n    super(Market.X2Y2, orders)\n  }\n\n  encode(planner: RoutePlanner, config: TradeConfig): void {\n    for (const item of this.orders) {\n      const functionSelector = X2Y2Trade.INTERFACE.getSighash(X2Y2Trade.INTERFACE.getFunction('run'))\n      const calldata = functionSelector + item.signedInput.slice(2)\n\n      if (item.tokenType == TokenType.ERC721) {\n        planner.addCommand(\n          CommandType.X2Y2_721,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId],\n          config.allowRevert\n        )\n      } else if (item.tokenType == TokenType.ERC1155) {\n        planner.addCommand(\n          CommandType.X2Y2_1155,\n          [item.price, calldata, item.recipient, item.tokenAddress, item.tokenId, item.tokenAmount],\n          config.allowRevert\n        )\n      }\n    }\n  }\n\n  getBuyItems(): BuyItem[] {\n    let buyItems: BuyItem[] = []\n    for (const item of this.orders) {\n      buyItems.push({\n        tokenAddress: item.tokenAddress,\n        tokenId: item.tokenId,\n        tokenType: item.tokenType,\n      })\n    }\n    return buyItems\n  }\n\n  getTotalPrice(): BigNumber {\n    let total = BigNumber.from(0)\n    for (const item of this.orders) {\n      total = total.add(item.price)\n    }\n    return total\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { ROUTER_AS_RECIPIENT, WETH_ADDRESS } from '../../utils/constants'\n\nexport class UnwrapWETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapWETH\n  readonly permit2Data: Permit2Permit\n  readonly wethAddress: string\n  readonly amount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit) {\n    this.wethAddress = WETH_ADDRESS(chainId)\n    this.amount = amount\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.wethAddress.toLowerCase(),\n        `must be permitting WETH address: ${this.wethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough WETH for unwrapWETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.wethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.UNWRAP_WETH, [ROUTER_AS_RECIPIENT, this.amount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { encodeInputTokenOptions, Permit2Permit } from '../../utils/inputTokens'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { CONTRACT_BALANCE, ROUTER_AS_RECIPIENT, STETH_ADDRESS } from '../../utils/constants'\n\nexport class WrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.WrapSTETH\n  readonly permit2Data: Permit2Permit\n  readonly stethAddress: string\n  readonly amount: BigNumberish\n  readonly wrapAmount: BigNumberish\n\n  constructor(amount: BigNumberish, chainId: number, permit2?: Permit2Permit, wrapAmount?: BigNumberish) {\n    this.stethAddress = STETH_ADDRESS(chainId)\n    this.amount = amount\n    this.wrapAmount = wrapAmount ?? CONTRACT_BALANCE\n\n    if (!!permit2) {\n      invariant(\n        permit2.details.token.toLowerCase() === this.stethAddress.toLowerCase(),\n        `must be permitting STETH address: ${this.stethAddress}`\n      )\n      invariant(permit2.details.amount >= amount, `Did not permit enough STETH for unwrapSTETH transaction`)\n      this.permit2Data = permit2\n    }\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    encodeInputTokenOptions(planner, {\n      permit2Permit: this.permit2Data,\n      permit2TransferFrom: {\n        token: this.stethAddress,\n        amount: this.amount.toString(),\n      },\n    })\n    planner.addCommand(CommandType.WRAP_STETH, [ROUTER_AS_RECIPIENT, this.wrapAmount])\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { BigNumberish } from 'ethers'\nimport { RoutePlanner, CommandType } from '../../utils/routerCommands'\nimport { Command, RouterTradeType, TradeConfig } from '../Command'\nimport { STETH_ADDRESS, NOT_SUPPORTED_ON_CHAIN } from '../../utils/constants'\n\nexport class UnwrapSTETH implements Command {\n  readonly tradeType: RouterTradeType = RouterTradeType.UnwrapSTETH\n  readonly recipient: string\n  readonly amountMinimum: BigNumberish\n\n  constructor(recipient: string, amountMinimum: BigNumberish, chainId: number) {\n    this.recipient = recipient\n    this.amountMinimum = amountMinimum\n    invariant(STETH_ADDRESS(chainId) != NOT_SUPPORTED_ON_CHAIN, `STETH not supported on chain ${chainId}`)\n  }\n\n  encode(planner: RoutePlanner, _: TradeConfig): void {\n    planner.addCommand(CommandType.UNWRAP_STETH, [this.recipient, this.amountMinimum])\n  }\n}\n"],"names":["RouterTradeType","NFTTrade","market","orders","length","invariant","Market","TokenType","CommandType","ALLOW_REVERT_FLAG","REVERTIBLE_COMMANDS","Set","SEAPORT_V1_5","SEAPORT_V1_4","NFTX","LOOKS_RARE_V2","X2Y2_721","X2Y2_1155","FOUNDATION","SUDOSWAP","NFT20","EXECUTE_SUB_PLAN","CRYPTOPUNKS","ELEMENT_MARKET","PERMIT_STRUCT","PERMIT_BATCH_STRUCT","PERMIT2_TRANSFER_FROM_STRUCT","PERMIT2_TRANSFER_FROM_BATCH_STRUCT","ABI_DEFINITION","PERMIT2_PERMIT","PERMIT2_PERMIT_BATCH","PERMIT2_TRANSFER_FROM","PERMIT2_TRANSFER_FROM_BATCH","V3_SWAP_EXACT_IN","V3_SWAP_EXACT_OUT","V2_SWAP_EXACT_IN","V2_SWAP_EXACT_OUT","WRAP_ETH","UNWRAP_WETH","SWEEP","SWEEP_ERC721","SWEEP_ERC1155","TRANSFER","PAY_PORTION","BALANCE_CHECK_ERC20","OWNER_CHECK_721","OWNER_CHECK_1155","APPROVE_ERC20","WRAP_STETH","UNWRAP_STETH","RoutePlanner","commands","inputs","addSubPlan","subplan","addCommand","type","parameters","allowRevert","command","createCommand","push","encodedInput","has","Error","concat","toString","padStart","defaultAbiCoder","encode","NOT_SUPPORTED_ON_CHAIN","CHAIN_CONFIGS","router","weth","steth","wsteth","creationBlock","UNIVERSAL_ROUTER_ADDRESS","chainId","UNIVERSAL_ROUTER_CREATION_BLOCK","WETH_ADDRESS","STETH_ADDRESS","PERMIT2_ADDRESS","CONTRACT_BALANCE","BigNumber","from","pow","ETH_ADDRESS","ZERO_ADDRESS","SENDER_AS_RECIPIENT","ROUTER_AS_RECIPIENT","OPENSEA_CONDUIT_SPENDER_ID","SUDOSWAP_SPENDER_ID","encodeFeeBips","fee","toHex","multiply","quotient","REFUND_ETH_PRICE_IMPACT_THRESHOLD","Percent","UniswapTrade","trade","options","flatFee","planner","_config","payerIsUser","payerIsRouter","inputAmount","currency","isNative","maximumAmountIn","slippageTolerance","recipient","performAggregatedSlippageCheck","tradeType","TradeType","EXACT_INPUT","routes","outputIsNative","outputAmount","inputIsNative","routerMustCustody","hasFeeOption","swaps","swap","route","protocol","Protocol","V2","addV2Swap","V3","addV3Swap","MIXED","addMixedSwap","minimumAmountOut","feeBips","wrapped","address","EXACT_OUTPUT","sub","mul","div","feeAmount","amount","lt","riskOfPartialFill","V2Trade","path","map","pool","V3Trade","createUncheckedTrade","encodeRouteToPath","tradeRecipient","pools","Pool","Pair","MixedRouteTrade","amountIn","amountOut","sections","partitionMixedRouteByProtocol","isLastSectionInRoute","i","outputToken","inputToken","input","section","getOutputOfPools","newRouteOriginal","MixedRouteSDK","token0","equals","token1","newRoute","MixedRoute","mixedRouteIsAllV3","every","encodeMixedRouteToPath","liquidityToken","priceImpact","greaterThan","swapOptions","SIGNATURE_LENGTH","EIP_2098_SIGNATURE_LENGTH","encodePermit","permit2","signature","ethers","utils","arrayify","joinSignature","splitSignature","encodeInputTokenOptions","approval","permit2Permit","token","details","permit2TransferFrom","mapApprovalProtocol","protocolAddress","toLowerCase","SwapRouter","swapCallParameters","trades","config","Array","isArray","nftTrades","filter","_","hasOwnProperty","currentNativeValueInRouter","transactionValue","nftInputTokens","nftTrade","tradePrice","getTotalPrice","Seaport","seaportTrade","seaportInputTokens","getInputTokens","forEach","add","uniswapTrade","inputTokenPermit","UnwrapWETH","WrapSTETH","UnwrapSTETH","encodePlan","swapNFTCallParameters","totalPrice","swapERC20CallParameters","inputCurrency","nativeCurrencyValue","deadline","deadlineOrPreviousBlockhash","undefined","functionSignature","calldata","INTERFACE","encodeFunctionData","value","toHexString","Interface","abi","CryptopunkTrade","Cryptopunks","item","tokenId","getBuyItems","buyItems","tokenAddress","CRYPTOPUNK_ADDRESS","tokenType","Cryptopunk","total","FoundationTrade","Foundation","price","referrer","ERC721","LooksRareV2Trade","LooksRareV2","refactorAPIData","takerBids","makerOrders","makerSignatures","totalValue","merkleTrees","apiOrder","collection","collectionType","ERC721_ORDER","ERC1155","itemIds","order","taker","additionalParameters","root","merkleRoot","proof","merkleProof","NFT20Trade","tokenIds","tokenAmounts","isV3","NFTXTrade","vaultId","swapCalldata","SeaportTrade","advancedOrders","orderFulfillments","items","index","orderIndex","itemIndex","considerationFulFillments","getConsiderationFulfillments","getAdvancedOrderParams","advancedOrder","OPENSEA_CONDUIT_KEY","inputTokenProcessing","protocolApproval","getTotalOrderPrice","commandMap","offer","identifierOrCriteria","inputTokens","consideration","totalOrderPrice","calculateValue","protocolDatas","considerationFulfillments","considerationRecipients","protocolData","j","findIndex","x","recipientIndex","data","numerator","denominator","extraData","considerations","reduce","amt","startAmount","SudoswapTrade","Sudoswap","swapInfo","maxCost","ethRecipient","nftRecipient","prevVal","nftIds","X2Y2Trade","X2Y2","functionSelector","getSighash","getFunction","signedInput","slice","tokenAmount","wethAddress","permit2Data","wrapAmount","stethAddress","amountMinimum"],"mappings":"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"}